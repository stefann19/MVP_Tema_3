//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVP_Tema_3
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MVP3Entities : DbContext
    {
        public MVP3Entities()
            : base("name=MVP3Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AppointmentIntervention> AppointmentInterventions { get; set; }
        public virtual DbSet<Intervention> Interventions { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Price> Prices { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int DeleteAppointment(Nullable<int> idAppointment)
        {
            var idAppointmentParameter = idAppointment.HasValue ?
                new ObjectParameter("idAppointment", idAppointment) :
                new ObjectParameter("idAppointment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAppointment", idAppointmentParameter);
        }
    
        public virtual int DeleteAppointmentIntervention(Nullable<int> idAppointment, Nullable<int> idIntervention)
        {
            var idAppointmentParameter = idAppointment.HasValue ?
                new ObjectParameter("idAppointment", idAppointment) :
                new ObjectParameter("idAppointment", typeof(int));
    
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAppointmentIntervention", idAppointmentParameter, idInterventionParameter);
        }
    
        public virtual int DeleteDoctor(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctor", idUserParameter);
        }
    
        public virtual int DeleteIntervention(Nullable<int> idIntervention)
        {
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteIntervention", idInterventionParameter);
        }
    
        public virtual int DeletePatient(Nullable<int> idPatient)
        {
            var idPatientParameter = idPatient.HasValue ?
                new ObjectParameter("idPatient", idPatient) :
                new ObjectParameter("idPatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", idPatientParameter);
        }
    
        public virtual int InsertAppointment(Nullable<int> idPatient, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time)
        {
            var idPatientParameter = idPatient.HasValue ?
                new ObjectParameter("idPatient", idPatient) :
                new ObjectParameter("idPatient", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAppointment", idPatientParameter, dateParameter, timeParameter);
        }
    
        public virtual int InsertAppointmentIntervention(Nullable<int> idAppointment, Nullable<int> idIntervention)
        {
            var idAppointmentParameter = idAppointment.HasValue ?
                new ObjectParameter("idAppointment", idAppointment) :
                new ObjectParameter("idAppointment", typeof(int));
    
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAppointmentIntervention", idAppointmentParameter, idInterventionParameter);
        }
    
        public virtual int InsertDoctor(string username, string password, string firstName, string lastName)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoctor", usernameParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int InsertIntervention(string description, Nullable<int> duration, Nullable<int> value, Nullable<System.DateTime> startingDate)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntervention", descriptionParameter, durationParameter, valueParameter, startingDateParameter);
        }
    
        public virtual int InsertPatient(string firstName, string lastName, Nullable<int> idUser)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", firstNameParameter, lastNameParameter, idUserParameter);
        }
    
        public virtual int InsertPrice(Nullable<int> idIntervention, Nullable<int> value, Nullable<System.DateTime> startingDate)
        {
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var startingDateParameter = startingDate.HasValue ?
                new ObjectParameter("startingDate", startingDate) :
                new ObjectParameter("startingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPrice", idInterventionParameter, valueParameter, startingDateParameter);
        }
    
        public virtual ObjectResult<InterventionPricesBeforeDate_Result> InterventionPricesBeforeDate(Nullable<int> idIntervention, Nullable<System.DateTime> date)
        {
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InterventionPricesBeforeDate_Result>("InterventionPricesBeforeDate", idInterventionParameter, dateParameter);
        }
    
        public virtual ObjectResult<Login_Result> Login(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Result>("Login", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SortPatientsByInterventionsNumber_Result> SortPatientsByInterventionsNumber(Nullable<int> idDoctor)
        {
            var idDoctorParameter = idDoctor.HasValue ?
                new ObjectParameter("idDoctor", idDoctor) :
                new ObjectParameter("idDoctor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SortPatientsByInterventionsNumber_Result>("SortPatientsByInterventionsNumber", idDoctorParameter);
        }
    
        public virtual int UpdateAppointment(Nullable<int> idAppointment, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time)
        {
            var idAppointmentParameter = idAppointment.HasValue ?
                new ObjectParameter("idAppointment", idAppointment) :
                new ObjectParameter("idAppointment", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAppointment", idAppointmentParameter, dateParameter, timeParameter);
        }
    
        public virtual int UpdateDoctor(Nullable<int> idUser, string username, string password, string firstName, string lastName)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor", idUserParameter, usernameParameter, passwordParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int UpdateIntervention(Nullable<int> idIntervention, string description, Nullable<int> duration)
        {
            var idInterventionParameter = idIntervention.HasValue ?
                new ObjectParameter("idIntervention", idIntervention) :
                new ObjectParameter("idIntervention", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIntervention", idInterventionParameter, descriptionParameter, durationParameter);
        }
    
        public virtual int UpdatePatient(Nullable<int> idPatient, string firstName, string lastName)
        {
            var idPatientParameter = idPatient.HasValue ?
                new ObjectParameter("idPatient", idPatient) :
                new ObjectParameter("idPatient", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", idPatientParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<CurrentPricesForInterventions_Result> CurrentPricesForInterventions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrentPricesForInterventions_Result>("CurrentPricesForInterventions");
        }
    }
}
